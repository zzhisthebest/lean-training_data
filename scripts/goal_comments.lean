import TrainingData.Frontend
import TrainingData.InfoTree.ToJson
import Mathlib.Data.String.Defs
import Mathlib.Lean.CoreM
import Mathlib.Tactic.Change
import Batteries.Data.List.Basic
import Cli

open Lean Elab IO Meta
open Cli System

instance : LE Position where
  le p‚ÇÅ p‚ÇÇ := p‚ÇÅ.line < p‚ÇÇ.line ‚à® p‚ÇÅ.line = p‚ÇÇ.line ‚àß p‚ÇÅ.column ‚â§ p‚ÇÇ.column

instance : DecidableRel ((¬∑ : Position) ‚â§ ¬∑) := by
  change DecidableRel fun _ _ => _ ‚à® _
  infer_instance

def Range := Position √ó Position
deriving DecidableEq, Repr, ToString

instance : LE Range where
  le r‚ÇÅ r‚ÇÇ := r‚ÇÇ.1 ‚â§ r‚ÇÅ.1 ‚àß r‚ÇÅ.2 ‚â§ r‚ÇÇ.2

instance : LT Range where
  lt r‚ÇÅ r‚ÇÇ := r‚ÇÅ ‚â§ r‚ÇÇ ‚àß r‚ÇÅ ‚â† r‚ÇÇ

instance : DecidableRel ((¬∑ : Range) ‚â§ ¬∑) := by
  change DecidableRel fun _ _ => _ ‚àß _
  infer_instance

instance : DecidableRel ((¬∑ : Range) < ¬∑) := by
  change DecidableRel fun _ _ => _ ‚àß _
  infer_instance

namespace Lean.Elab.TacticInfo

def rangesAndGoals (i : TacticInfo) (ctx : ContextInfo) : IO (Range √ó String) := do
  return ‚ü®i.range ctx, (Format.joinSep (‚Üê i.goalStateAfter ctx) "\n").pretty 1000000‚ü©

end Lean.Elab.TacticInfo

partial def dropEnclosed (L : List (Range √ó String)) : List (Range √ó String) :=
  let L' := L.filter fun ‚ü®r, _‚ü© => ¬¨ L.any fun ‚ü®r', _‚ü© => r < r'
  if L' = L then L' else dropEnclosed L'

example : True := by trivial

def justTheGoal (s : String) : String :=
  if s = "" then "üéâ no goals" else
  let lines := s.splitOn "\n"
  let goals := lines.filter fun l => l.startsWith "‚ä¢ "
  match goals with
  | [] => ""
  | [g] => if g.length > 80 then
      g.take 78 ++ " ‚Ä¶"
    else
      g
  | _ => ""

def String.indent (s : String) (k : Nat) : String := ‚ü®List.replicate k ' '‚ü© ++ s

def goalComments (args : Cli.Parsed) : IO UInt32 := do
    initSearchPath (‚Üê findSysroot)
    let module := args.positionalArg! "module" |>.as! ModuleName
    IO.println s!"‚Üê findOLean module: {‚Üê findOLean module}"
    let mut trees ‚Üê moduleInfoTrees module
    IO.println s!"hello"
    trees := trees.flatMap InfoTree.retainTacticInfo
    trees := trees.flatMap InfoTree.retainOriginal
    trees := trees.flatMap InfoTree.retainSubstantive
    let L‚ÇÅ ‚Üê (trees.flatMap InfoTree.tactics).mapM fun ‚ü®i, c‚ü© => i.rangesAndGoals c
    let L‚ÇÇ := dropEnclosed L‚ÇÅ |>.filter fun ‚ü®‚ü®‚ü®l‚ÇÅ, _‚ü©, ‚ü®l‚ÇÇ, _‚ü©‚ü©, _‚ü©  => l‚ÇÅ = l‚ÇÇ
    let L‚ÇÉ := (L‚ÇÇ.map fun ‚ü®r, s‚ü© => (r, justTheGoal s)) |>.filter fun ‚ü®_, s‚ü© => s != ""
    let mut src := (‚Üê moduleSource module).splitOn "\n"
    --IO.println s!"src: {src}"
    for ‚ü®‚ü®‚ü®l, c‚ü©, _‚ü©, s‚ü© in L‚ÇÉ.reverse do
      let toInsert := ("-- " ++ s).indent c
      if src[l]? ‚â† toInsert then
        src := src.insertIdx l toInsert
    let out := ("\n".intercalate src)
    if args.hasFlag "edit" then
      IO.FS.writeFile (‚Üê findLean module) out
    IO.println out
    return 0

/-- Setting up command line options and help text for `lake exe goal_comments`. -/
def goal_comments : Cmd := `[Cli|
  goal_comments VIA goalComments; ["0.0.1"]
"Modify a Lean file by inserting comments after every tactic invocation showing the goal.
Prints the modified source code to stdout."

  FLAGS:
    "edit";      "Also edit the source code in place."

  ARGS:
    module : ModuleName; "Lean module to compile and annotate with goal comments."
]

/-- `lake exe goal_comments` -/
def main (args : List String) : IO UInt32 :=
  goal_comments.validate args

-- See `scripts/goal_comments.sh` for a script to run this on all of Mathlib.
